version: '3.8'

services:
  configserver:
    image: microframe_configserver:0.0.1-SNAPSHOT
    ports:
      - "8071:8071"
    healthcheck:
      test:  ["CMD-SHELL", "curl --fail --silent localhost:8071/actuator/health/readiness | grep UP || exit 1"]   
      interval: 5s
      timeout: 5s
      start_period: 10s
      retries: 3
    networks:
      backend:
        aliases:
          - configserver
  eurekaserver:
    image: microframe_eurekaserver:0.0.1-SNAPSHOT
    ports:
      - "8070:8761"
    networks:
      backend:
        aliases:
          - "eurekaserver"         
    depends_on:
      configserver:
        condition: service_healthy  
  gatewayserver:
    image: microframe_gatewayserver:0.0.1-SNAPSHOT
    ports:
      - "8072:8072"
    networks:
      backend:
        aliases:
          - "gatewayserver"         
    depends_on:
      configserver:
        condition: service_healthy  
      eurekaserver:
        condition: service_started
  db:
    build: ./psql_docker
    ports:
      - "5432:5432"
    environment:
      POSTGRES_USER: "Alex"
      POSTGRES_PASSWORD: "postgres"
    user: '1000'
    volumes:
      - type: bind
        source: ./db-data/postgres
        target: /var/lib/postgresql/data
    networks:
      backend:
        aliases:
          - psql
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 6s
      timeout: 5s
      start_period: 5s
      retries: 3
  mongoserver:
   build: ./mongo_docker
   user: '1000'
   restart: always
   ports:
    - "30001:27017"
   env_file: ./mongo_docker/init_db.env
   volumes:
    - type: bind
      source: ./mongo-db-data/secondservice/db
      target: /data/db
   networks:
    backend:
      aliases:
        - mongoserver
  firstservice:
    image: com.microframe-first-service:0.0.1-SNAPSHOT
    ports:
      - "8080:8080"
    networks:
      backend:
        aliases:
          - firstservice
    depends_on:
      configserver:
        condition: service_started
      eurekaserver:
        condition: service_started
      db:
        condition: service_healthy
  secondservice:
    image: com.microframe-second-service:0.0.1-SNAPSHOT
    ports:
      - "8090:8080"
    networks:
      backend:
        aliases:
          - secondservice
    depends_on:
      configserver:
        condition: service_started
      eurekaserver:
        condition: service_started
      mongoserver:
        condition: service_started
networks:
  backend:
    driver: bridge
