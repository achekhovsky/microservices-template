version: '3.8'

services:
  configserver:
    image: microframe_configserver:0.0.1-SNAPSHOT
    ports:
      - "8071:8071"
    healthcheck:
      test:  ["CMD-SHELL", "curl --fail --silent localhost:8071/actuator/health/readiness | grep UP || exit 1"]   
      interval: 5s
      timeout: 5s
      start_period: 10s
      retries: 3
    networks:
      backend:
        aliases:
          - configserver
  eurekaserver:
    image: microframe_eurekaserver:0.0.1-SNAPSHOT
    ports:
      - "8070:8761"
    networks:
      backend:
        aliases:
          - "eurekaserver"         
    depends_on:
      configserver:
        condition: service_healthy  
  gatewayserver:
    image: microframe_gatewayserver:0.0.1-SNAPSHOT
    ports:
      - "8072:8072"
    networks:
      backend:
        aliases:
          - "gatewayserver"         
    depends_on:
      configserver:
        condition: service_healthy  
      eurekaserver:
        condition: service_started
  db:
    build: ./psql_docker
#    ports:
#      - "5432:5432"
    environment:
      POSTGRES_USER: "Alex"
      POSTGRES_PASSWORD: "postgres"
    user: '1000'
    volumes:
      - type: bind
        source: ./db-data/postgres
        target: /var/lib/postgresql/data
    networks:
      backend:
        aliases:
          - psql
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 6s
      timeout: 5s
      start_period: 5s
      retries: 3
  mongoserver:
   build: ./mongo_docker
   user: '1000'
   restart: always
#   ports:
#    - "30001:27017"
   env_file: ./mongo_docker/init_db.env
   volumes:
    - type: bind
      source: ./mongo-db-data/secondservice/db
      target: /data/db
   networks:
    backend:
      aliases:
        - mongoserver
  firstservice:
    image: com.microframe-first-service:0.0.1-SNAPSHOT
#    ports:
#      - "8080:8080"
    networks:
      backend:
        aliases:
          - firstservice
    depends_on:
      configserver:
        condition: service_started
      eurekaserver:
        condition: service_started
      db:
        condition: service_healthy
      keycloak:
        condition: service_healthy
  secondservice:
    image: com.microframe-second-service:0.0.1-SNAPSHOT
#    ports:
#      - "8090:8080"
    networks:
      backend:
        aliases:
          - secondservice
    depends_on:
      configserver:
        condition: service_started
      eurekaserver:
        condition: service_started
      mongoserver:
        condition: service_started
      kafkaserver:
        condition: service_started
      keycloak:
        condition: service_healthy
  keycloak:
    build: keycloak_docker
    restart: always
    environment:
      - KC_HEALTH_ENABLED=true
      #- KEYCLOAK_STATISTICS="db, http" 
      # Solves the issue with the internal/external endpoints of service in the oidc process
      - PROXY_ADDRESS_FORWARDING=true
      - KEYCLOAK_FRONTEND_URL=http://localhost:9080/auth/
      #      KEYCLOAK_USER: admin
      #      KEYCLOAK_PASSWORD: admin
    volumes:
      - type: bind
        source: ./keycloak_docker/keycloak-add-users.json
        target: /opt/jboss/keycloak/standalone/configuration/keycloak-add-user.json
          # read_only: true
      - type: bind 
        source: ./keycloak_docker/realm-export.json
        target: /opt/jboss/keycloak/realm-export.json
    command:
      - "-b 0.0.0.0"
      - "-Dkeycloak.import=/opt/jboss/keycloak/realm-export.json"
      - "-Dkeycloak.profile.feature.scripts=enabled"
      - "-Dkeycloak.profile.feature.upload_scripts=enabled"
    ports:
      - "9080:8080"
    healthcheck:
      test:  ["CMD-SHELL", "curl --fail --silent localhost:8080/auth/realms/microframe"]   
      interval: 5s
      timeout: 5s
      start_period: 30s
      retries: 5
    networks:
      backend:
        aliases:
        - "keycloak"
  redisserver:
    image: redis:alpine
#    ports:
#      - 6379:6379
    networks:
      backend:
        aliases:
          - "redis"
  zookeeper:
    image: wurstmeister/zookeeper:latest
#    ports:
#      - 2181:2181
    networks:
      backend:
        aliases:
          - "zookeeper"
  kafkaserver:
    image: wurstmeister/kafka:latest
#    ports:
#      - 9092:9092
    environment:
      - KAFKA_ADVERTISED_HOST_NAME=kafka
      - KAFKA_ADVERTISED_PORT=9092
      - KAFKA_ZOOKEEPER_CONNECT=zookeeper:2181
      - KAFKA_CREATE_TOPICS=dresses:1:1,ratings:1:1
        #    volumes:
        #      - "/var/run/docker.sock:/var/run/docker.sock"
    depends_on:
      - zookeeper
    networks:
      backend:
        aliases:
          - "kafka"
  logstash:
    build: logstash_docker
#    ports:
#      - "5000:5000"
    networks:
      backend:
        aliases:
          - "logstash"   
  elasticsearch:
    #    image: docker.elastic.co/elasticsearch/elasticsearch:8.7.1
    image: elasticsearch:8.7.1
    environment:
      - node.name=elasticsearch
      - discovery.type=single-node
      - cluster.name=elastic-cluster
      - bootstrap.memory_lock=true
      - ES_JAVA_OPTS=-Xms512m -Xmx512m
        #      - ELASTIC_PASSWORD=elastic
        #      - KIBANA_PASSWORD=kibana
      - xpack.license.self_generated.type=basic
      - xpack.security.enabled=false
    ulimits:
      memlock:
        soft: -1
        hard: -1
    volumes:
      - type: bind
        source: ./elastic-data
        target: /usr/share/elasticsearch/data
    ports:
      - 9300:9300
      - 9200:9200
    networks:
      backend:
        aliases:
          - "elasticsearch"
  zipkin: 
    image: openzipkin/zipkin 
    container_name: zipkin
    environment: 
    #Only if elsticsearch version low then 8. 
#      - STORAGE_TYPE=elasticsearch
#      - "ES_HOSTS=elasticsearch:9200" #,http://elasticsearch:9300,http://localhost:9200
#      - ES_USERNAME=elastic
#      - ES_PASSWORD=elastic
    environment: 
      - STORAGE_TYPE=mem
    ports:
      - "9411:9411"
    depends_on: 
      - elasticsearch
    networks:
      backend:
        aliases:
          - "zipkin"
  kibana:
    image: kibana:8.7.1
    volumes:
      - ./kibana_docker/kibana.yml:/usr/share/kibana/config/kibana.yml
    ports:
      - 5601:5601
    networks:
      backend:
        aliases:
          - "kibana"
                   
networks:
  backend:
    driver: bridge
