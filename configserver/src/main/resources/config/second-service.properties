echo.profile=default
echo.name=second-service

eureka.instance.preferIpAddress = true
eureka.client.registerWithEureka = true
eureka.client.fetchRegistry = true
eureka.client.serviceUrl.defaultZone = http://eurekaserver:8761/eureka/

spring.cloud.loadbalancer.ribbon.enabled = false

management.health.circuitbreakers.enabled = true
resilience4j.circuitbreaker.configs.default.registerHealthIndicator = true
resilience4j.circuitbreaker.instances.secondServiceInternalCBreaker.baseConfig = default
resilience4j.circuitbreaker.instances.secondServiceInternalCBreaker.slidingWindowSize = 5
resilience4j.circuitbreaker.instances.secondServiceInternalCBreaker.slidingWindowType = COUNT_BASED
resilience4j.circuitbreaker.instances.secondServiceInternalCBreaker.minimumNumberOfCalls = 10
resilience4j.circuitbreaker.instances.secondServiceInternalCBreaker.permittedNumberOfCallsInHalfOpenState = 3
resilience4j.circuitbreaker.instances.secondServiceInternalCBreaker.failureRateThreshold = 50
resilience4j.circuitbreaker.instances.secondServiceInternalCBreaker.waitDurationInOpenState = 10s

resilience4j.bulkhead.instances.secondServiceInternalBulkhead.maxConcurrentCalls = 10
resilience4j.bulkhead.instances.secondServiceInternalBulkhead.maxWaitDuration = 10ms

#The configuration needed for validating JWT token against our Keycloak server
spring.security.oauth2.resourceserver.jwt.issuer-uri=http://keycloak:8080/auth/realms/microframe
spring.security.oauth2.resourceserver.jwt.jwk-set-uri=http://keycloak:8080/auth/realms/microframe/protocol/openid-connect/certs

management.endpoints.web.exposure.include=*
management.endpoints.enabled-by-default=true