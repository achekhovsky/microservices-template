echo.profile=default
echo.name=gateway-server

spring.cloud.loadbalancer.ribbon.enabled = false

eureka.instance.preferIpAddress = true
eureka.client.registerWithEureka = true
eureka.client.fetchRegistry = true
eureka.client.serviceUrl.defaultZone = http://eurekaserver:8761/eureka/

#Creating routes based on services registered with a DiscoveryClient compatible service registry
#spring.cloud.gateway.discovery.locator.enabled = true
#spring.cloud.gateway.discovery.locator.lowerCaseServiceId = true
#Appling filters for all routes
spring.cloud.gateway.default-filters[0] = TokenRelay
spring.cloud.gateway.routes[0].id = first-service
spring.cloud.gateway.routes[0].uri = http://firstservice:8080
spring.cloud.gateway.routes[0].predicates[0] = Path=/fservice/**
spring.cloud.gateway.routes[0].filters[0] = RewritePath=/fservice/?(?<segment>.*), /${segment}
spring.cloud.gateway.routes[0].filters[1] = RemoveRequestHeader=Cookie
#token passing filter
#spring.cloud.gateway.routes[0].filters[2] = TokenRelay
spring.cloud.gateway.routes[1].id = second-service
spring.cloud.gateway.routes[1].uri = http://secondservice:8080
spring.cloud.gateway.routes[1].predicates[0] = Path=/sservice/**
spring.cloud.gateway.routes[1].filters[0] = RewritePath=/sservice/?(?<segment>.*), /${segment}
spring.cloud.gateway.routes[1].filters[1] = RemoveRequestHeader=Cookie
#token passing filter
#spring.cloud.gateway.routes[1].filters[2] = TokenRelay
#spring.cloud.gateway.filter.secure-headers.disable=x-frame-options,strict-transport-security,content-security-policy
#spring.cloud.gateway.filter.secure-headers.content-security-policy = default-src *

spring.security.oauth2.client.registration.keycloak.provider = keycloak
spring.security.oauth2.client.registration.keycloak.client-id = microframe-realm-client
spring.security.oauth2.client.registration.keycloak.client-secret = V2cqkv1QNrxCssaBr1U6J8NkOkPfiJLa
spring.security.oauth2.client.registration.keycloak.client-authentication-method = client_secret_basic
spring.security.oauth2.client.registration.keycloak.authorization-grant-type = authorization_code
spring.security.oauth2.client.registration.keycloak.redirect-uri = {baseUrl}/login/oauth2/code/{registrationId}
spring.security.oauth2.client.registration.keycloak.scope = openid
spring.security.oauth2.client.provider.keycloak.authorization-uri = http://localhost:9080/auth/realms/microframe/protocol/openid-connect/auth
spring.security.oauth2.client.provider.keycloak.token-uri = http://keycloak:8080/auth/realms/microframe/protocol/openid-connect/token
spring.security.oauth2.client.provider.keycloak.user-info-uri = http://keycloak:8080/auth/realms/microframe/protocol/openid-connect/userinfo
spring.security.oauth2.client.provider.keycloak.userNameAttribute = sub
spring.security.oauth2.client.provider.keycloak.jwk-set-uri = http://keycloak:8080/auth/realms/microframe/protocol/openid-connect/certs
spring.security.oauth2.client.registration.keycloak.client-name = keycloak

management.endpoints.web.exposure.include=*
management.endpoints.enabled-by-default=true