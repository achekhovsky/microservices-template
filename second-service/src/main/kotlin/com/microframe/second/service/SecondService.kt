package com.microframe.second.service

import com.microframe.custom.utils.event.DataChangeEventModel
import com.microframe.second.event.DataChangeEventPublisher
import com.microframe.second.model.SecondServiceModel
import com.microframe.second.repository.SecondRepository
import io.github.resilience4j.bulkhead.annotation.Bulkhead
import io.github.resilience4j.circuitbreaker.annotation.CircuitBreaker
import org.slf4j.Logger
import org.slf4j.LoggerFactory
import org.springframework.beans.factory.annotation.Autowired
import org.springframework.context.MessageSource
import org.springframework.stereotype.Service
import java.util.*
import kotlin.jvm.optionals.getOrNull

@Service
open class SecondService {
    private val logger: Logger = LoggerFactory.getLogger(SecondService::class.java)

    @Autowired
    lateinit var messages: MessageSource
    @Autowired
    lateinit var secondRepository: SecondRepository
    @Autowired
    lateinit var changeEventPublisher: DataChangeEventPublisher

    //Breaker for the db interaction
    @CircuitBreaker(name = "secondServiceInternalCBreaker",
                fallbackMethod= "getSecondFallback")
    @Bulkhead(name = "secondServiceInternalBulkhead",
        fallbackMethod= "getSecondFallback")
    fun getSecondById(secondId: String, locale: Locale): SecondServiceModel {
        var fm: SecondServiceModel? = secondRepository.findById(secondId).getOrNull()
        fm?.let {
            changeEventPublisher.publishDataChangeEvent(DataChangeEventModel.Actions.GET, it.id, it.secondName)
            return it
        }
        throw IllegalArgumentException(
            String.format(messages.getMessage(
                "second.search.error.message", null, locale), secondId));
    }

    @CircuitBreaker(name = "secondServiceInternalCBreaker",
                fallbackMethod= "getSecondFallback")
    @Bulkhead(name = "secondServiceInternalBulkhead",
        fallbackMethod= "getSecondFallback")
    fun getSecondByName(secondName: String, locale: Locale): SecondServiceModel {
        var fm: SecondServiceModel? = secondRepository.findBySecondName(secondName)
        fm?.let {
            changeEventPublisher.publishDataChangeEvent(DataChangeEventModel.Actions.GET, it.id, it.secondName)
            return it
        }
        throw IllegalArgumentException(
            String.format(messages.getMessage(
                "second.search.error.message", null, locale), secondName));
    }

    private fun getSecondFallback(secondName: String, locale: Locale, @Suppress("UNUSED_PARAMETER") t: Throwable): SecondServiceModel {
        var fm = SecondServiceModel()
        fm.let {
            it.secondName = secondName
            it.description = "This instance was generated by a fallback method, it is not possible to get the service instance from the database. (Locale[${locale.displayName}])"
            logger.error("SecondService.getSecondFallback [${t.message}] ${t.printStackTrace().toString()}")
        }
        return fm
    }

    fun createSecond(second: SecondServiceModel, locale: Locale):SecondServiceModel {
        second.apply {
            secondName = when(secondName) {
                "" -> String.format("secondName_%s", UUID.randomUUID().toString().dropLast(20))
                else -> {
                    secondName
                }
            }
        }
        secondRepository.save(second)
        changeEventPublisher.publishDataChangeEvent(DataChangeEventModel.Actions.CREATE, second.id, second.secondName)
        return second
    }

    fun updateSecond(second: SecondServiceModel, locale: Locale):SecondServiceModel {
        secondRepository.save(second)
        changeEventPublisher.publishDataChangeEvent(DataChangeEventModel.Actions.UPDATE, second.id, second.secondName)
        return second
    }

    fun deleteSecond(secondName: String, locale: Locale):String {
        var secondForDel = secondRepository.findBySecondName(secondName)
        var responseMessage = String.format(messages.getMessage("second.delete.message", null, locale),
            secondForDel?.id, secondForDel?.secondName)
        secondRepository.deleteBySecondName(secondName)
        changeEventPublisher.publishDataChangeEvent(DataChangeEventModel.Actions.DELETE, secondForDel?.id ?: "", secondForDel?.secondName ?: "")
        return responseMessage
    }
}